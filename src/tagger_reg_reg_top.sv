// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module tagger_reg_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 6
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output tagger_reg_reg_pkg::tagger_reg_reg2hw_t reg2hw, // Write
  input  tagger_reg_reg_pkg::tagger_reg_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import tagger_reg_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [BlockAw-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic pat_commit_qs;
  logic pat_commit_wd;
  logic pat_commit_we;
  logic [31:0] pat_addr_0_qs;
  logic [31:0] pat_addr_0_wd;
  logic pat_addr_0_we;
  logic [31:0] pat_addr_1_qs;
  logic [31:0] pat_addr_1_wd;
  logic pat_addr_1_we;
  logic [31:0] pat_addr_2_qs;
  logic [31:0] pat_addr_2_wd;
  logic pat_addr_2_we;
  logic [31:0] pat_addr_3_qs;
  logic [31:0] pat_addr_3_wd;
  logic pat_addr_3_we;
  logic [31:0] pat_addr_4_qs;
  logic [31:0] pat_addr_4_wd;
  logic pat_addr_4_we;
  logic [31:0] pat_addr_5_qs;
  logic [31:0] pat_addr_5_wd;
  logic pat_addr_5_we;
  logic [31:0] pat_addr_6_qs;
  logic [31:0] pat_addr_6_wd;
  logic pat_addr_6_we;
  logic [31:0] pat_addr_7_qs;
  logic [31:0] pat_addr_7_wd;
  logic pat_addr_7_we;
  logic [31:0] patid_qs;
  logic [31:0] patid_wd;
  logic patid_we;
  logic [31:0] addr_conf_qs;
  logic [31:0] addr_conf_wd;
  logic addr_conf_we;

  // Register instances

  // Subregister 0 of Multireg pat_commit
  // R[pat_commit]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pat_commit (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pat_commit_we),
    .wd     (pat_commit_wd),

    // from internal hardware
    .de     (hw2reg.pat_commit[0].de),
    .d      (hw2reg.pat_commit[0].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pat_commit[0].q ),

    // to register interface (read)
    .qs     (pat_commit_qs)
  );



  // Subregister 0 of Multireg pat_addr
  // R[pat_addr_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_pat_addr_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pat_addr_0_we),
    .wd     (pat_addr_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pat_addr[0].q ),

    // to register interface (read)
    .qs     (pat_addr_0_qs)
  );

  // Subregister 1 of Multireg pat_addr
  // R[pat_addr_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_pat_addr_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pat_addr_1_we),
    .wd     (pat_addr_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pat_addr[1].q ),

    // to register interface (read)
    .qs     (pat_addr_1_qs)
  );

  // Subregister 2 of Multireg pat_addr
  // R[pat_addr_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_pat_addr_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pat_addr_2_we),
    .wd     (pat_addr_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pat_addr[2].q ),

    // to register interface (read)
    .qs     (pat_addr_2_qs)
  );

  // Subregister 3 of Multireg pat_addr
  // R[pat_addr_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_pat_addr_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pat_addr_3_we),
    .wd     (pat_addr_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pat_addr[3].q ),

    // to register interface (read)
    .qs     (pat_addr_3_qs)
  );

  // Subregister 4 of Multireg pat_addr
  // R[pat_addr_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_pat_addr_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pat_addr_4_we),
    .wd     (pat_addr_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pat_addr[4].q ),

    // to register interface (read)
    .qs     (pat_addr_4_qs)
  );

  // Subregister 5 of Multireg pat_addr
  // R[pat_addr_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_pat_addr_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pat_addr_5_we),
    .wd     (pat_addr_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pat_addr[5].q ),

    // to register interface (read)
    .qs     (pat_addr_5_qs)
  );

  // Subregister 6 of Multireg pat_addr
  // R[pat_addr_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_pat_addr_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pat_addr_6_we),
    .wd     (pat_addr_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pat_addr[6].q ),

    // to register interface (read)
    .qs     (pat_addr_6_qs)
  );

  // Subregister 7 of Multireg pat_addr
  // R[pat_addr_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_pat_addr_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pat_addr_7_we),
    .wd     (pat_addr_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pat_addr[7].q ),

    // to register interface (read)
    .qs     (pat_addr_7_qs)
  );



  // Subregister 0 of Multireg patid
  // R[patid]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_patid (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (patid_we),
    .wd     (patid_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.patid[0].q ),

    // to register interface (read)
    .qs     (patid_qs)
  );



  // Subregister 0 of Multireg addr_conf
  // R[addr_conf]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_addr_conf (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (addr_conf_we),
    .wd     (addr_conf_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.addr_conf[0].q ),

    // to register interface (read)
    .qs     (addr_conf_qs)
  );




  logic [10:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == TAGGER_REG_PAT_COMMIT_OFFSET);
    addr_hit[ 1] = (reg_addr == TAGGER_REG_PAT_ADDR_0_OFFSET);
    addr_hit[ 2] = (reg_addr == TAGGER_REG_PAT_ADDR_1_OFFSET);
    addr_hit[ 3] = (reg_addr == TAGGER_REG_PAT_ADDR_2_OFFSET);
    addr_hit[ 4] = (reg_addr == TAGGER_REG_PAT_ADDR_3_OFFSET);
    addr_hit[ 5] = (reg_addr == TAGGER_REG_PAT_ADDR_4_OFFSET);
    addr_hit[ 6] = (reg_addr == TAGGER_REG_PAT_ADDR_5_OFFSET);
    addr_hit[ 7] = (reg_addr == TAGGER_REG_PAT_ADDR_6_OFFSET);
    addr_hit[ 8] = (reg_addr == TAGGER_REG_PAT_ADDR_7_OFFSET);
    addr_hit[ 9] = (reg_addr == TAGGER_REG_PATID_OFFSET);
    addr_hit[10] = (reg_addr == TAGGER_REG_ADDR_CONF_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(TAGGER_REG_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(TAGGER_REG_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(TAGGER_REG_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(TAGGER_REG_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(TAGGER_REG_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(TAGGER_REG_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(TAGGER_REG_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(TAGGER_REG_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(TAGGER_REG_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(TAGGER_REG_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(TAGGER_REG_PERMIT[10] & ~reg_be)))));
  end

  assign pat_commit_we = addr_hit[0] & reg_we & !reg_error;
  assign pat_commit_wd = reg_wdata[0];

  assign pat_addr_0_we = addr_hit[1] & reg_we & !reg_error;
  assign pat_addr_0_wd = reg_wdata[31:0];

  assign pat_addr_1_we = addr_hit[2] & reg_we & !reg_error;
  assign pat_addr_1_wd = reg_wdata[31:0];

  assign pat_addr_2_we = addr_hit[3] & reg_we & !reg_error;
  assign pat_addr_2_wd = reg_wdata[31:0];

  assign pat_addr_3_we = addr_hit[4] & reg_we & !reg_error;
  assign pat_addr_3_wd = reg_wdata[31:0];

  assign pat_addr_4_we = addr_hit[5] & reg_we & !reg_error;
  assign pat_addr_4_wd = reg_wdata[31:0];

  assign pat_addr_5_we = addr_hit[6] & reg_we & !reg_error;
  assign pat_addr_5_wd = reg_wdata[31:0];

  assign pat_addr_6_we = addr_hit[7] & reg_we & !reg_error;
  assign pat_addr_6_wd = reg_wdata[31:0];

  assign pat_addr_7_we = addr_hit[8] & reg_we & !reg_error;
  assign pat_addr_7_wd = reg_wdata[31:0];

  assign patid_we = addr_hit[9] & reg_we & !reg_error;
  assign patid_wd = reg_wdata[31:0];

  assign addr_conf_we = addr_hit[10] & reg_we & !reg_error;
  assign addr_conf_wd = reg_wdata[31:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = pat_commit_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = pat_addr_0_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = pat_addr_1_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = pat_addr_2_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = pat_addr_3_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = pat_addr_4_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = pat_addr_5_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = pat_addr_6_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = pat_addr_7_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = patid_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = addr_conf_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module tagger_reg_reg_top_intf
#(
  parameter int AW = 6,
  localparam int DW = 32
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output tagger_reg_reg_pkg::tagger_reg_reg2hw_t reg2hw, // Write
  input  tagger_reg_reg_pkg::tagger_reg_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  tagger_reg_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


